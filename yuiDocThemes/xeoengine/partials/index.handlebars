<div class="apidocs">
    <div id="docs-main" class="content">
        <a name="welcome"><h1>Welcome to the xeoEngine API Documentation</h1></a>

        <a name="apiConcept"><h2>API Concept</h2></a>

        <p>In this walkthrough we'll create the
            spinning torus scene shown in the screenshot below. To show how xeoEngine scenes are dynamically editable, we'll
            create the scene incrementally: first we'll create the basic torus entity, then
            set it spinning, and then add texture. Finally, to show how data-driven xeoEngine is, we'll clone the scene, which
            involves serializing and deserializing it as JSON.</p>
        <br>

        <div style="text-align:left">
            <a href="http://xeoengine.org/examples/#materials_fresnel_specular" ><img
                    src="../../assets/images/torus.png" style="width:500px;height:400px"></a>
        </div>

        <div class="space"></div>

        <h4>Creating a 3D Scene</h4>

        <p>First, include <a
                href="https://cdn.rawgit.com/xeolabs/xeoengine/master/build/xeoengine.min.js">xeoengine.min.js</a>
            in your
            HTML
            page:</p>
        <pre class="prettyprint lang-html">&lt;script src="https://cdn.rawgit.com/xeolabs/xeoengine/master/build/xeoengine.min.js"&gt;&lt;/script&gt;</pre>
        <p>Next, using the JavaScript API, create the 3D scene as an entity-component graph, as shown in the
            diagram below. Note how a
            <a href="./classes/Scene.html" target="_docs">Scene</a> is
            basically a container of <a href="./classes/Component.html" target="_docs">Components</a> that are
            tied
            together by <a href="./classes/Entity.html" target="_docs">Entities</a>.</p>

<pre class="prettyprint lang-javascript">
var scene = new XEO.Scene();

var material = new XEO.PhongMaterial(scene, {
    diffuse: [ 0.6, 0.6, 0.7 ]
});

var geometry = new XEO.TorusGeometry(scene);

var entity = new XEO.Entity(scene, {
    material: material,
    geometry: geometry
});
</pre>

        <div style="text-align:left">
            <img src="http://www.gliffy.com/go/publish/image/7304207/L.png">
        </div>
        <div class="space"></div>
        <h4>Defaults</h4>

        <p>xeoEngine provides defaults for pretty much everything, which means that we only need to
            create things wherever we need to override those defaults. For our <a
                    href="./docs/classes/Entity.html" target="_docs">Entity</a>,
            we provided our own <a
                    href="./classes/PhongMaterial.html" target="_docs">PhongMaterial</a> and <a
                    href="./classes/Geometry.html" target="_docs">Geometry</a> components, leaving
            the entity
            to
            fall back on the <a href="./docs/classes/Scene.html" target="_docs">Scene's</a> default flyweight instances
            for all the other components it needs
            (eg. <a href="./classes/Camera.html" target="_docs">Camera</a>, <a
                    href="./classes/Lights.html" target="_docs">Lights</a> etc).</p>

        <h4>Animating</h4>

        <p>Animate <a href="./docs/classes/Scene.html" target="_docs">Scenes</a> by updating properties on the
            components
            within them. Almost everything in xeoEngine
            fires change events that you can subscribe to, which is quite handy for scripting.</p>

<pre class="prettyprint lang-javascript">material.on("diffuse",
     function(value) {
            console.log("Material diffuse is now: " + value);
     });

// This is going to fire our change listener above
material.diffuse = [0.9, 0.9, 0.6];</pre>

        <p>Likewise, you can update properties on any of the <a href="./docs/classes/Scene.html"
                                                                target="_docs">Scene's</a> default flyweight components,
            such
            as the
            default
            <a href="./docs/classes/Camera.html" target="_docs">Camera</a>, which we'll orbit a little bit on each
            frame:</p>
                        <pre class="prettyprint lang-javascript">scene.on("tick", function () {
    var view = scene.camera.view;
    view.rotateEyeY(0.6);
    view.rotateEyeX(0.3);
});</pre>

        <h4>Editing</h4>

        <p>You can edit <span class="emphasis">everything</span> within your <a href="./docs/classes/Scene.html"
                                                                                target="_docs">Scene</a> dynamically, at
            runtime.
            Create and
            destroy components, link or unlink
            them to each other, update their properties, and so on. Let's add a diffuse <a
                    href="./docs/classes/Texture.html" target="_docs">Texture</a> map to our <a
                    href="./docs/classes/PhongMaterial.html" target="_docs">PhongMaterial</a>,
            which will
            immediately
            appear on
            our torus:</p>

<pre class="prettyprint lang-javascript">material.diffuseMap = new XEO.Texture(scene, {
    src: "textures/uvGrid2.jpg"
});</pre>

        <h4>Saving and Loading</h4>

        <p>You can save or load a JSON snapshot of your scene at any time. This snippet will dump the
            whole state of
            our <a href="./docs/classes/Scene.html" target="_docs">Scene</a> to JSON, then load that JSON again to
            create a second, identical <a href="./docs/classes/Scene.html" target="_docs">Scene</a>:</p>

 <pre class="prettyprint lang-javascript">var json = scene.json;

var scene2 = new XEO.Scene({ json: json });</pre>

        <h4>Learn More</h4>

        <ul>
            <li><a
                    href="http://xeoengine.org/docs" target="_docs">API documentation</a></li>
            <li><a
                    href="https://github.com/xeolabs/xeoengine/wiki" target="_wiki">Wiki</a></li>
            <li><a
                    href="http://xeoengine.org/examples/#materials_fresnel_specular" target="_examples">Examples</a>
            </li>
        </ul>
    </div>
</div>


